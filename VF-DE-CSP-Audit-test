Disconnect-MgGraph
Connect-MgGraph -Scopes "AuditLog.Read.All", "User.Read.All", "Directory.Read.All", "UserAuthenticationMethod.Read.All", "UserAuthenticationMethod.ReadWrite.All", "User.ReadWrite
# Get all users
$users = Get-MgUser -All
# Initialize an array to hold the user data
$userData = @()

# Loop through each user
foreach ($user in $users) {
    $userId =  $user.Id
    $UserName = $user.DisplayName
     #$authMethods = Get-MgUserAuthenticationMethod -UserId $user.Id
     #$emailMethod = $authMethods | Where-Object { $_.ODataType -eq "#microsoft.graph.emailAuthenticationMethod" }
    # Get the user creation date
    #$createdDateTime = $user.CreatedDateTime

    # Get the last sign-in date and calculate the number of days since the last sign-in
    #$signInLogs = Get-MgAuditLogSignIn -Filter "UserId eq '$userId'" -All:$true | Sort-Object CreatedDateTime -Descending
    #$lastSignIn = $signInLogs[0].CreatedDateTime
    #$daysSinceLastSignIn = (Get-Date) - $lastSignIn

    $signInLogs = Get-MgAuditLogSignIn -Filter "UserId eq '$userId'" -All:$true | Sort-Object CreatedDateTime -Descending

  if ($signInLogs -ne $null -and $signInLogs.Count -gt 0) {
    $lastSignIn = $signInLogs[0].CreatedDateTime
    $daysSinceLastSignIn = (Get-Date) - $lastSignIn
 } else {
    Write-Host "No sign-in logs found for user with Name : $UserName"
    
 }

    # Get the MFA status
    $mfaEnabled =(Get-MgUserAuthenticationMicrosoftAuthenticatorMethod -UserId $userId).DisplayName
    #$authMethods = Get-MgUserAuthenticationMethod -UserId $userId
    #$mfaEnabled = $authMethods | Where-Object { $_.MethodType -eq "fido2" -or $_.MethodType -eq "microsoftAuthenticator" -or $_.MethodType -eq "phone" -or $_.MethodType -eq "email" } | Measure-Object | Select-Object -ExpandProperty Count -gt 0
    #$mfaEnabled = ($authMethods | Where-Object { $_.MethodType -eq "fido2" -or $_.MethodType -eq "microsoftAuthenticator" -or $_.MethodType -eq "phone" -or $_.MethodType -eq "email" } | Measure-Object).Count -gt 0

    # Get the authentication methods
 #$authMethods = Get-MgUserAuthenticationMethod -UserId $userId

 # Check if MFA is enabled
 #$mfaEnabled = ($authMethods | Where-Object { $_.MethodType -eq "fido2" -or $_.MethodType -eq "microsoftAuthenticator" -or $_.MethodType -eq "phone" -or $_.MethodType -eq "email" } | Measure-Object).Count -gt 0


    # Get the groups the user is a member of
    $groups = Get-MgUserMemberOfAsGroup -UserId $userId | Select-Object -ExpandProperty DisplayName

    # Get the directory roles the user is a member of
    $directoryRoles = Get-MgUserMemberOfAsDirectoryRole -UserId $userId | Select-Object -ExpandProperty DisplayName

    # Get the alternative email address
    $alternativeEmail = $user.Mail

    # Add the user data to the array
    $userData += New-Object PSObject -Property @{
        fullName = $UserName
        UserId = $userId
        CreatedDateTime = $createdDateTime
        DaysSinceLastSignIn = $daysSinceLastSignIn.Days
        MfaEnabled = $mfaEnabled
        Groups = $groups -join ', '
        DirectoryRoles = $directoryRoles -join ', '
        AlternativeEmail = $alternativeEmail
    }
    
    Write-Host  "user $UserName"

# Remove the closing curly brace '}' at the end of the code block
# }
 } 

# Export the user data to a CSV file
$userData | Export-Csv -Path 'C:\user_data2.csv' -NoTypeInformation


